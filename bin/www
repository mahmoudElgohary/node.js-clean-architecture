let  app = require('../app');
const debug = require('debug')('praxilabs:server');
const http = require('http');
const models = require('../frameworks/database/mysql/models');

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

const server = http.createServer(app);
models.sequelize.sync().then(function () {
server.listen(port, function () {
    console.log('Express server listening on port ' + server.address().port);
});
server.on('error', onError);
server.on('listening', onListening);
}, function (error) {
    console.log(error);
    throw error;
});

function normalizePort(val) {
    const port = parseInt(val, 10);
    if (isNaN(port)) {
// named pipe
return val;
}

if (port >= 0) {
// port number
return port;
}

return false;
}

function onError(error) {
    if (error.syscall !== 'listen') {
throw error;
}

    const bind = typeof port === 'string'
      ? 'Pipe ' + port : 'Port ' + port;

// handle specific listen errors with friendly messages
switch (error.code) {
case 'EACCES': console.error(bind + ' requires elevated privileges');
process.exit(1);
break;
case 'EADDRINUSE': console.error(bind + ' is already in use');
process.exit(1);
break;
default: throw error;
}
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    const addr = server.address();
    const bind = typeof addr === 'string'
      ? 'pipe ' + addr : 'port ' + addr.port;
    console.log(
      'Express server listening on %d, in %s mode',
      addr.port,
      app.get('env')
    );
}
